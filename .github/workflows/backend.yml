name: Backend CI/CD

on:
  push:
    branches: [main]
    paths: ['src/backend/**']
  pull_request:
    branches: [main]
    paths: ['src/backend/**']

env:
  REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'
  BUILDX_VERSION: 'v0.11.2'
  PLATFORMS: 'linux/amd64,linux/arm64'
  CACHE_PREFIX: 'backend-build-'

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/pip
            ~/.poetry
          key: ${{ env.CACHE_PREFIX }}${{ hashFiles('**/package.json', '**/pyproject.toml') }}
          restore-keys: |
            ${{ env.CACHE_PREFIX }}

  test-node:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, chat-service, coach-service, payment-service, user-service]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          
      - name: Install Dependencies
        run: |
          cd src/backend
          yarn install --frozen-lockfile
          
      - name: Run Linting
        run: |
          cd src/backend
          yarn lint ${{ matrix.service }}
          
      - name: Run Tests
        run: |
          cd src/backend
          yarn test ${{ matrix.service }} --coverage
          
      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: node-${{ matrix.service }}

  test-python:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry config virtualenvs.create true
          
      - name: Install Dependencies
        run: |
          cd src/backend/video-service
          poetry install
          
      - name: Run Tests
        run: |
          cd src/backend/video-service
          poetry run pytest --cov=src --cov-report=xml
          
      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: python-video-service

  build-node:
    needs: test-node
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, chat-service, coach-service, payment-service, user-service]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: ${{ env.BUILDX_VERSION }}
          
      - name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: src/backend/${{ matrix.service }}
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ matrix.service }}:buildcache,mode=max
          
      - name: Scan Image
        uses: aquasecurity/trivy-action@v0.12.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Scan Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  build-python:
    needs: test-python
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: ${{ env.BUILDX_VERSION }}
          
      - name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: src/backend/video-service
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/video-service:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/video-service:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/video-service:buildcache,mode=max
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            
      - name: Scan Image
        uses: aquasecurity/trivy-action@v0.12.0
        with:
          image-ref: ${{ env.REGISTRY }}/video-service:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Scan Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    needs: [build-node, build-python]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy to Production
        run: |
          echo "Deploying backend services to production..."
          # Add deployment steps here based on infrastructure requirements