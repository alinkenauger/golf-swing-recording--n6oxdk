name: Android CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'src/android/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/android/**'

permissions:
  contents: write
  packages: write
  deployments: write
  checks: write

env:
  JAVA_VERSION: '17'
  GRADLE_VERSION: '8.1.0'
  ANDROID_SDK_VERSION: '34'
  ANDROID_BUILD_TOOLS_VERSION: '34.0.0'
  KOTLIN_VERSION: '1.9.0'
  MIN_CODE_COVERAGE: '80'
  GRADLE_OPTS: '-Xmx4g -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}

      - name: Grant execute permission for gradlew
        run: chmod +x src/android/gradlew

      - name: Run unit tests with coverage
        run: |
          cd src/android
          ./gradlew test jacocoTestReport
          
      - name: Run Android Lint
        run: |
          cd src/android
          ./gradlew lint

      - name: Run Kotlin static analysis
        run: |
          cd src/android
          ./gradlew detekt

      - name: Run instrumentation tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          arch: x86_64
          profile: pixel
          script: |
            cd src/android
            ./gradlew connectedAndroidTest

      - name: Check code coverage
        run: |
          cd src/android
          ./gradlew jacocoTestCoverageVerification
          COVERAGE=$(grep -Po '(?<=<td class="ctr2">)[^<]*' build/reports/jacoco/test/html/index.html | head -1)
          if (( $(echo "$COVERAGE < $MIN_CODE_COVERAGE" | bc -l) )); then
            echo "Code coverage $COVERAGE% is below minimum required $MIN_CODE_COVERAGE%"
            exit 1
          fi

      - name: Build debug APK
        run: |
          cd src/android
          ./gradlew assembleDebug

      - name: Build release APK
        run: |
          cd src/android
          ./gradlew assembleRelease
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}

      - name: Upload debug APK
        uses: actions/upload-artifact@v3
        with:
          name: app-debug
          path: src/android/app/build/outputs/apk/debug/app-debug.apk

      - name: Upload release APK
        uses: actions/upload-artifact@v3
        with:
          name: app-release
          path: src/android/app/build/outputs/apk/release/app-release.apk

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            src/android/app/build/reports/tests/
            src/android/app/build/reports/androidTests/
            src/android/app/build/reports/coverage/
            src/android/app/build/reports/lint-results.html

  deploy:
    name: Deploy to Play Store
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Download release APK
        uses: actions/download-artifact@v3
        with:
          name: app-release

      - name: Deploy to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_JSON }}
          packageName: com.videocoach
          releaseFiles: app-release.apk
          track: internal
          status: completed
          whatsNewDirectory: distribution/whatsnew
          mappingFile: src/android/app/build/outputs/mapping/release/mapping.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: app-release.apk
          body_path: distribution/whatsnew/whatsnew-en-US
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const deployment = await github.rest.repos.createDeployment({
              owner,
              repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: deployment.data.id,
              state: '${{ job.status }}',
              environment: 'production',
              environment_url: 'https://play.google.com/store/apps/details?id=com.videocoach'
            });