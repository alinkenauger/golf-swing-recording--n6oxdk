version: "3.9"

# Global environment variables
x-environment: &common-env
  NODE_ENV: production
  ELASTIC_APM_ENABLED: "true"
  ELASTIC_APM_ENVIRONMENT: production
  PROMETHEUS_METRICS_ENABLED: "true"

# Common healthcheck configuration
x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

# Common logging configuration
x-logging: &default-logging
  driver: json-file
  options:
    max-size: "100m"
    max-file: "3"

services:
  # API Gateway Service
  api_gateway:
    build:
      context: .
      dockerfile: Dockerfile.api
    image: videocoach/api-gateway:latest
    ports:
      - "3000:3000"
    environment:
      <<: *common-env
      PORT: 3000
      RATE_LIMIT_WINDOW: "1m"
      RATE_LIMIT_MAX: 1000
      CORS_ORIGINS: ${CORS_ORIGINS}
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      <<: *default-healthcheck
    logging: *default-logging
    networks:
      - videocoach_network
    depends_on:
      - redis
      - mongodb
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Video Processing Service
  video_service:
    build:
      context: .
      dockerfile: Dockerfile.video
    image: videocoach/video-service:latest
    ports:
      - "8000:8000"
    environment:
      <<: *common-env
      PYTHONUNBUFFERED: 1
      MAX_VIDEO_SIZE_MB: 500
      PROCESSING_THREADS: 4
      COMPRESSION_QUALITY: high
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
    deploy:
      replicas: 5
      update_config:
        parallelism: 2
        delay: 20s
        order: start-first
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      <<: *default-healthcheck
    logging: *default-logging
    networks:
      - videocoach_network
    volumes:
      - video_processing:/tmp/processing
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    security_opt:
      - no-new-privileges:true

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: videocoach
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 2GB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d videocoach"]
      <<: *default-healthcheck
    logging: *default-logging
    networks:
      - videocoach_network

  # MongoDB Database
  mongodb:
    image: mongo:6.0-focal
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: videocoach
    volumes:
      - mongodb_data:/data/db
      - ./init-scripts/mongo:/docker-entrypoint-initdb.d
    ports:
      - "27017:27017"
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      <<: *default-healthcheck
    logging: *default-logging
    networks:
      - videocoach_network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      <<: *default-healthcheck
    logging: *default-logging
    networks:
      - videocoach_network

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: /data/postgres
      o: bind
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      device: /data/mongodb
      o: bind
  redis_data:
    driver: local
  video_processing:
    driver: local

networks:
  videocoach_network:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"
    ipam:
      driver: default
      config:
        - subnet: 10.0.0.0/16