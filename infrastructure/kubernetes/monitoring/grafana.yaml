apiVersion: v1
kind: List
items:
# Service Account for Grafana
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: grafana
    namespace: videocoach-system
    labels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/part-of: video-coaching-platform
      app.kubernetes.io/component: monitoring
      app.kubernetes.io/version: "10.1.5"

# ConfigMap for Grafana configuration
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: grafana-config
    namespace: videocoach-system
    labels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/part-of: video-coaching-platform
  data:
    grafana.ini: |
      [server]
      root_url = https://grafana.videocoach.com
      [security]
      admin_user = ${GRAFANA_ADMIN_USER}
      [auth]
      disable_login_form = false
      [dashboards]
      default_home_dashboard_path = /etc/grafana/dashboards/platform-overview.json
    datasources.yaml: |
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://prometheus-service:9090
          isDefault: true
          version: 1
          editable: false
          jsonData:
            timeInterval: "15s"
            queryTimeout: "30s"

# PersistentVolumeClaim for Grafana storage
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: grafana-storage
    namespace: videocoach-system
    labels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/part-of: video-coaching-platform
  spec:
    accessModes:
      - ReadWriteOnce
    storageClassName: database-storage
    resources:
      requests:
        storage: 10Gi

# Deployment for Grafana
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: grafana
    namespace: videocoach-system
    labels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/part-of: video-coaching-platform
      app.kubernetes.io/component: monitoring
      app.kubernetes.io/version: "10.1.5"
  spec:
    replicas: 2
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: grafana
    template:
      metadata:
        labels:
          app.kubernetes.io/name: grafana
          app.kubernetes.io/part-of: video-coaching-platform
      spec:
        serviceAccountName: grafana
        securityContext:
          fsGroup: 472
          runAsUser: 472
          runAsNonRoot: true
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - grafana
                topologyKey: kubernetes.io/hostname
        containers:
        - name: grafana
          image: grafana/grafana:10.1.5
          ports:
          - name: http
            containerPort: 3000
          env:
          - name: GF_SECURITY_ADMIN_USER
            valueFrom:
              secretKeyRef:
                name: grafana-credentials
                key: admin-user
          - name: GF_SECURITY_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: grafana-credentials
                key: admin-password
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              cpu: 1
              memory: 2Gi
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 60
            timeoutSeconds: 5
          volumeMounts:
          - name: grafana-storage
            mountPath: /var/lib/grafana
          - name: grafana-config
            mountPath: /etc/grafana
          - name: grafana-dashboards
            mountPath: /etc/grafana/dashboards
        volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-storage
        - name: grafana-config
          configMap:
            name: grafana-config
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards

# Service for Grafana
- apiVersion: v1
  kind: Service
  metadata:
    name: grafana-service
    namespace: videocoach-system
    labels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/part-of: video-coaching-platform
  spec:
    type: ClusterIP
    ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
    selector:
      app.kubernetes.io/name: grafana

# ConfigMap for Grafana dashboards
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: grafana-dashboards
    namespace: videocoach-system
    labels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/part-of: video-coaching-platform
  data:
    platform-overview.json: |
      {
        "title": "Platform Overview",
        "panels": [
          {
            "title": "System Health",
            "type": "stat",
            "datasource": "Prometheus",
            "targets": [
              {"expr": "sum(up{job=~\".*\"}) / count(up{job=~\".*\"}) * 100"},
              {"expr": "sum(rate(http_requests_total{status=~\"5..\"}[5m])) / sum(rate(http_requests_total[5m])) * 100"},
              {"expr": "histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (le))"}
            ]
          },
          {
            "title": "Service Performance",
            "type": "graph",
            "datasource": "Prometheus",
            "targets": [
              {"expr": "sum(rate(container_cpu_usage_seconds_total[5m])) by (pod)"},
              {"expr": "sum(container_memory_usage_bytes) by (pod)"},
              {"expr": "sum(rate(http_requests_total[5m])) by (service)"}
            ]
          }
        ]
      }
    video-processing.json: |
      {
        "title": "Video Processing",
        "panels": [
          {
            "title": "Processing Queue",
            "type": "graph",
            "datasource": "Prometheus",
            "targets": [
              {"expr": "video_processing_queue_length"},
              {"expr": "histogram_quantile(0.95, sum(rate(video_processing_duration_seconds_bucket[5m])) by (le))"},
              {"expr": "sum(rate(video_processing_errors_total[5m]))"}
            ]
          }
        ]
      }