apiVersion: v1
kind: Secret
metadata:
  name: alertmanager-config
  namespace: videocoach-system
  labels:
    app: alertmanager
    component: monitoring
type: Opaque
stringData:
  alertmanager.yaml: |
    global:
      resolve_timeout: 5m
      slack_api_url: ${SLACK_WEBHOOK_URL}
      pagerduty_url: "https://events.pagerduty.com/v2/enqueue"

    templates:
    - '/etc/alertmanager/templates/*.tmpl'

    route:
      receiver: 'slack-warnings'
      group_wait: ${ALERT_GROUP_WAIT}
      group_interval: ${ALERT_GROUP_INTERVAL}
      repeat_interval: ${ALERT_REPEAT_INTERVAL}
      group_by: ['alertname', 'cluster', 'service']

      routes:
      - match:
          severity: critical
          category: infrastructure
        receiver: pagerduty-critical
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 4h
        continue: true

      - match:
          severity: critical
          category: application
        receiver: pagerduty-critical
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 4h

      - match:
          severity: warning
        receiver: slack-warnings
        group_wait: 1m
        group_interval: 10m
        repeat_interval: 12h

      - match:
          category: disaster-recovery
        receiver: automated-recovery
        group_wait: 0s
        group_interval: 1m
        repeat_interval: 5m

    inhibit_rules:
    - source_match:
        severity: 'critical'
        category: 'disaster-recovery'
      target_match:
        severity: 'warning'
      equal: ['alertname', 'namespace', 'service']

    - source_match:
        severity: 'critical'
        category: 'infrastructure'
      target_match:
        severity: 'warning'
        category: 'infrastructure'
      equal: ['node', 'cluster', 'service']

    receivers:
    - name: 'pagerduty-critical'
      pagerduty_configs:
      - service_key: ${PAGERDUTY_SERVICE_KEY}
        description: '{{ .CommonAnnotations.description }}'
        severity: '{{ .CommonLabels.severity }}'
        class: '{{ .CommonLabels.category }}'
        group_key: '{{ .GroupKey }}'
        details:
          firing: '{{ .Alerts.Firing | len }}'
          resolved: '{{ .Alerts.Resolved | len }}'
          service: '{{ .CommonLabels.service }}'

    - name: 'slack-critical'
      slack_configs:
      - channel: '#alerts-critical'
        api_url: ${SLACK_WEBHOOK_URL}
        title: '{{ .CommonAnnotations.summary }}'
        text: '{{ .CommonAnnotations.description }}'
        send_resolved: true
        title_link: '{{ .GeneratorURL }}'
        footer: 'Alert Manager'
        actions:
        - type: 'button'
          text: 'View in Grafana'
          url: '{{ .CommonAnnotations.dashboard_url }}'

    - name: 'slack-warnings'
      slack_configs:
      - channel: '#alerts-warnings'
        api_url: ${SLACK_WEBHOOK_URL}
        title: '{{ .CommonAnnotations.summary }}'
        text: '{{ .CommonAnnotations.description }}'
        send_resolved: true

    - name: 'automated-recovery'
      webhook_configs:
      - url: 'http://recovery-controller:8080/trigger'
        send_resolved: true

---
apiVersion: monitoring.coreos.com/v1
kind: Alertmanager
metadata:
  name: alertmanager
  namespace: videocoach-system
  labels:
    app: alertmanager
    component: monitoring
spec:
  replicas: 3
  configSecret: alertmanager-config
  resources:
    requests:
      memory: 200Mi
      cpu: 100m
    limits:
      memory: 500Mi
      cpu: 200m
  storage:
    volumeClaimTemplate:
      spec:
        storageClassName: database-storage
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 2000
  tolerations:
  - key: "monitoring"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - alertmanager
          topologyKey: kubernetes.io/hostname